<template>
	<view>
		<!-- 导航栏 -->
		<free-nav-bar showBack title="BadtzMaru" :noreadnum="10"><free-icon-button slot="right" :icon="'\ue6fd'"></free-icon-button></free-nav-bar>
		<!-- 聊天内容区域 -->
		<scroll-view scroll-y class="bg-light position-fixed left-0 right-0 px-3" style="bottom: 105rpx;" :style="chatBodyBottom" :show-scrollbar="false">
			<!-- 聊天信息列表组件 -->
			<block v-for="(item, index) in list" :key="index">
				<free-chat-item ref="chatItem" :item="item" :index="index" :preTime="index > 0 ? list[index - 1].create_time : 0" @long="long"></free-chat-item>
			</block>
		</scroll-view>
		<!-- 底部输入框 -->
		<view class="position-fixed left-0 right-0 border-top flex align-center" style="background-color: #F7F7F6;height: 105rpx;" :style="'bottom:' + KeyboardHeight + 'px;'">
			<free-icon-button :icon="'\ue606'"></free-icon-button>
			<view class="flex-1"><textarea fixed class="border bg-white rounded p-1 font-md" style="height: 75rpx;" :adjust-position="false" v-model="text" /></view>
			<!-- 表情 -->
			<free-icon-button :icon="'\ue605'"></free-icon-button>
			<template v-if="text.length === 0">
				<!-- 扩展菜单 -->
				<free-icon-button :icon="'\ue603'" @click="openAction"></free-icon-button>
			</template>
			<template v-else>
				<!-- 发送按钮 -->
				<view class="main-bg-color rounded mr-2 px-2 py-1" @click="send('text')"><text class="font text-white">发送</text></view>
			</template>
		</view>

		<!-- 扩展菜单 -->
		<free-popup bottom ref="action" transformOrigin="center bottom" @hide="KeyboardHeight = 0">
			<view style="height: 580rpx;" class="border-top border-light-secondary"><text>123</text></view>
		</free-popup>
		<!-- 弹出层 -->
		<free-popup ref="extend" :bodyWidth="240" :bodyHeight="getMenusHeight" :tabbarHeight="105">
			<view style="width: 240rpx;" :style="getMenusStyle" class="flex flex-column">
				<view v-for="(item, index) in menusList" :key="index" class="flex-1 flex align-center" hover-class="bg-light" @click="clickEvent(item.event)">
					<text class="font-md pl-3">{{ item.name }}</text>
				</view>
			</view>
		</free-popup>
	</view>
</template>
<script>
// #ifdef APP-PLUS-NVUE
const dom = weex.requireModule('dom');
// #endif
import freeNavBar from '@/components/free-ui/free-nav-bar.vue';
import freeIconButton from '@/components/free-ui/free-icon-button.vue';
import freeChatItem from '@/components/free-ui/free-chat-item.vue';
import freePopup from '@/components/free-ui/free-popup.vue';
export default {
	components: {
		freeNavBar,
		freeIconButton,
		freeChatItem,
		freePopup,
	},
	data() {
		return {
			navBarHeight: 0,
			list: [
				{
					avatar: '/static/images/avatar.jpeg',
					user_id: 1,
					nickname: '昵称1',
					type: 'text',
					data: '123你好你好你好你好你好你好你好你好你好你好你好你好',
					create_time: 1607227184,
					isremove: false,
				},
				{
					avatar: '/static/images/avatar.jpeg',
					user_id: 2,
					nickname: '昵称2',
					type: 'text',
					data: '456你好你好你好你好你好你好你好你好你好你好你好你好',
					create_time: 1607227188,
					isremove: false,
				},
				{
					avatar: '/static/images/avatar.jpeg',
					user_id: 2,
					nickname: '昵称2',
					type: 'text',
					data: '456你好你好你好你好你好你好你好你好你好你好你好你好',
					create_time: 1607528184,
					isremove: false,
				},
			],
			menus: [
				{ name: '复制', event: '' },
				{ name: '发送给朋友', event: '' },
				{ name: '收藏', event: '' },
				{ name: '删除', event: '' },
				{ name: '多选', event: '' },
				{ name: '撤回', event: 'removeChatItem' },
			],
			// 当前操作的气泡索引
			propIndex: -1,
			KeyboardHeight: 0,
			// 输入文字
			text: '',
		};
	},
	computed: {
		// 动态获取菜单高度
		getMenusHeight() {
			let H = 100;
			return this.menus.length * H;
		},
		// 获取菜单的样式
		getMenusStyle() {
			return `height: ${this.getMenusHeight}rpx;`;
		},
		// 判断是否操作本人信息
		isdoSelf() {
			// 获取本人ID (假设拿到了1)
			let id = 1;
			let user_id = this.propIndex > -1 ? this.list[this.propIndex].user_id : 0;
			return user_id === id;
		},
		// 获取操作菜单
		menusList() {
			return this.menus.filter(v => {
				if (v.name === '撤回' && !this.isdoSelf) {
					return false;
				} else {
					return true;
				}
			});
		},

		// 聊天区域bottom
		chatBodyBottom() {
			return `bottom: ${uni.upx2px(105) + this.KeyboardHeight}px;top: ${this.navBarHeight}px;`;
		},
	},
	mounted() {
		let statusBarHeight = 0;
		// #ifdef APP-PLUS-NVUE
		statusBarHeight = plus.navigator.getStatusbarHeight();
		// #endif
		this.navBarHeight = statusBarHeight + uni.upx2px(90);
		// 监听键盘高度变化
		uni.onKeyboardHeightChange(res => {
			this.KeyboardHeight = res.height;
			if (this.KeyboardHeight > 0) {
				this.pageToBottom();
			}
		});
	},
	methods: {
		// 打开扩展菜单
		openAction() {
			this.$refs.action.show();
			this.KeyboardHeight = uni.upx2px(580);
		},
		// 发送
		send(type) {
			var obj = {
				avatar: '/static/images/avatar.jpeg',
				user_id: 1,
				nickname: '昵称',
				type: type,
				data: '',
				create_time: new Date().getTime(),
				isremove: false,
			};
			switch (type) {
				case 'text':
					obj.data = this.text;
					break;
			}
			this.list.push(obj);
			// 发送文字成功需要清空输入框
			if (type === 'text') {
				this.text = '';
			}
			// 置于底部
			this.pageToBottom();
		},
		// 回到底部
		pageToBottom() {
			setTimeout(() => {
				// #ifdef APP-PLUS-NVUE
				let chatItem = this.$refs.chatItem;
				if (chatItem) {
					let lastIndex = chatItem.length > 0 ? chatItem.length - 1 : 0;
					if (chatItem[lastIndex]) {
						dom.scrollToElement(chatItem[lastIndex], {});
					}
				}
				// #endif
			}, 300);
		},
		// 长按消息气泡
		long({ x, y, index }) {
			// 初始化索引
			this.propIndex = index;
			this.$refs.extend.show(x, y);
		},
		// 操作菜单方法分发
		clickEvent(event) {
			switch (event) {
				case 'removeChatItem':
					// 拿到被操作的信息
					if (this.propIndex > -1) {
						this.list[this.propIndex].isremove = true;
					}
					break;
				default:
					break;
			}
			// 关闭菜单
			this.$refs.extend.hide();
		},
	},
	methods: {
		// 长按消息气泡
		long({ x, y, index }) {
			// 初始化索引
			this.propIndex = index;
			this.$refs.extend.show(x, y);
		},
		// 操作菜单方法分发
		clickEvent(event) {
			switch (event) {
				case 'removeChatItem':
					// 拿到被操作的信息
					if (this.propIndex > -1) {
						this.list[this.propIndex].isremove = true;
					}
					break;
				default:
					break;
			}
			// 关闭菜单
			this.$refs.extend.hide();
		},
	},
};
</script>

<style></style>
